name: Deploy Release

run-name: Deploy release ${{ inputs.release }} to ${{ inputs.deploy-environment }} environment

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release Tag to Deploy'
        required: true
        type: text
      deploy-environment:
        description: 'Deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'stg'
          - 'prd'

jobs:
  check-release:
    name: Check Release Exists
    runs-on: ubuntu-latest
    #     This is to know if the reference of the trigger i.e the tag is a release or prerelease. Later to avoid any release which are not created or in Draft state.
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4.1.6
        with:
          ref: refs/tags/${{ inputs.release }}
      - name: Check the release details
        id: release_prefix
        run: |
          gh release view ${{ inputs.release }} --json isPrerelease,isDraft --jq 'if .isPrerelease==false and .isDraft==false then "release" elif .isPrerelease==true and .isDraft==false then "prerelease" else "draft" end' >> release-prefix.json
          echo "prefix=`cat release-prefix.json`" >> $GITHUB_OUTPUT
    outputs:
      prefix: ${{ steps.release_prefix.outputs.prefix }}

  build:
    needs: check-release
    if: (( needs.check-release.outputs.prefix == 'release' && inputs.deploy-environment == 'prd') || ( needs.check-release.outputs.prefix == 'prerelease' && inputs.deploy-environment != 'prd'))
    name: Create Build
    environment: ${{ inputs.deploy-environment }}
    env:
      INPUT_TOKEN: ${{ secrets.NPM_TOKEN }}
    runs-on: self-hosted
    steps:
      - name: Setting up Environment specific AWS Region
        run: |
          if [ ${{ inputs.deploy-environment }} == prd ]; then
              echo "AWS_REGION is us-east-1"
              echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
              echo "NPM_ENV=prod" >> $GITHUB_ENV
              echo "FULL_ENV=production" >> $GITHUB_ENV
          else
              echo "AWS_REGION is us-east-1"
              echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
              if [ ${{ inputs.deploy-environment }} == dev ]; then
                  echo "NPM_ENV=dev" >> $GITHUB_ENV
                  echo "FULL_ENV=development" >> $GITHUB_ENV
              else
                  echo "NPM_ENV=stage" >> $GITHUB_ENV
                  echo "FULL_ENV=staging" >> $GITHUB_ENV
              fi
          fi
      - uses: actions/checkout@v4.1.6
        with:
          ref: refs/tags/${{ inputs.release }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ inputs.release }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          ENVIRONMENT: ${{ inputs.deploy-environment }}
          FULL_ENV: ${{ env.FULL_ENV }}
        run: |
          source ./.aws/config.sh
          make build-$FULL_ENV
          docker tag $FULL_ENV-$SERVICE_NAME $ECR_REGISTRY/$SERVICE_NAME:$ENVIRONMENT-$IMAGE_TAG
          docker push $ECR_REGISTRY/$SERVICE_NAME:$ENVIRONMENT-$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$SERVICE_NAME:$ENVIRONMENT-$IMAGE_TAG"
          docker image rm $ECR_REGISTRY/$SERVICE_NAME:$ENVIRONMENT-$IMAGE_TAG

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: [build]
    env:
      ENVIRONMENT: ${{ inputs.deploy-environment }}
    steps:
      - uses: actions/checkout@v4.1.6
        with:
          ref: refs/tags/${{ inputs.release }}
      - name: Setting up Environment specific AWS Region
        run: |
          if [ ${{ inputs.deploy-environment }} == prd ]; then
            echo "AWS_REGION is us-east-1"
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          else
            echo "AWS_REGION is us-east-1"
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          fi
      - name: Setting variables from config file
        run: |
          source ./.aws/config.sh
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "STACK_NAME=$ENVIRONMENT-$SERVICE_NAME-stack" >> $GITHUB_ENV
          echo "MEMORY=$MEMORY" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "CONTAINER_PORT=$CONTAINER_PORT" >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy to Amazon ECS cluster
        uses: aws-actions/aws-cloudformation-github-deploy@v1.3.0
        env:
          IMAGE_TAG: ${{ inputs.deploy-environment }}-${{ inputs.release }}
        with:
          name: ${{ env.STACK_NAME }}
          template: ./.aws/cloudformation.yml
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: '1'
          parameter-overrides: >-
            ServiceName=${{ env.SERVICE_NAME }},
            EnvironmentName=${{ env.ENVIRONMENT }},
            ContainerPort=${{ env.CONTAINER_PORT }},
            ContainerMemory=${{ env.MEMORY }},
            ContainerCpu=${{ env.CPU }},
            RevisionNumber=${{ env.IMAGE_TAG }}
