AWSTemplateFormatVersion: '2010-09-09'
Description: ECS service setup for running it on a cluster using application load balancer

Parameters:
  EnvironmentName:
    Description: The name of the environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stg
      - prd
    ConstraintDescription: Please choose a valid instance type.

  ServiceName:
    Description: The name of the service to be created
    Type: String
    Default: boilerplate
  
  ContainerPort:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 8085

  ContainerCpu:
    Type: Number
    Default: 128
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 128
    Description: How much memory in megabytes to give the container
  
  RevisionNumber:
    Type: String
    Default: latest
    Description: Git commit slug used as a container tag
    
Mappings:
  EnvironmentNameToParamsMappings:
    dev:
      LogGroupRetentionInDays: 30
    stg:
      LogGroupRetentionInDays: 30
    prd:
      LogGroupRetentionInDays: 90

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'ed-${EnvironmentName}-${ServiceName}'
      RetentionInDays: !FindInMap [EnvironmentNameToParamsMappings, !Ref EnvironmentName, LogGroupRetentionInDays]
    
  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub 'ed-${ServiceName}'
      NamespaceId: 
        Fn::ImportValue: !Sub 'ed-${EnvironmentName}:NamespaceID'
      DnsConfig:
        RoutingPolicy: 'MULTIVALUE'
        DnsRecords:
          - Type: 'SRV'
            TTL: '60'
      HealthCheckCustomConfig:
        FailureThreshold: '1'
  

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 15
      Name: !Sub 'ed-${EnvironmentName}-${ServiceName}'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      TargetType: 'instance'
      VpcId:
        Fn::ImportValue:
          !Sub 'ed-${EnvironmentName}:VpcId'
      Tags: 
        - Key: 'project'
          Value: !Sub 'ed-${EnvironmentName}'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub 'ed-${EnvironmentName}:PublicLoadBalancerARN'
      Protocol: HTTP
      Port: !Ref 'ContainerPort'
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
          Order : 1

              
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'ed-${EnvironmentName}-${ServiceName}'
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ed_ECS_TaskExecutionRole'
      ContainerDefinitions:
        - Name: !Sub 'ed-${EnvironmentName}-${ServiceName}'
          Cpu: !Ref 'ContainerCpu'
          MemoryReservation: !Ref 'ContainerMemory'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}:${RevisionNumber}'
          Privileged: false
          ReadonlyRootFilesystem: true
          User: 'node'
          DockerSecurityOptions:
            - 'apparmor:docker-default'
          DockerLabels:
            com.datadoghq.tags.env: !Sub "ed-${EnvironmentName}"
            com.datadoghq.tags.service: !Ref "ServiceName"
            com.datadoghq.tags.version: !Ref "RevisionNumber"
          MountPoints:
            #- ContainerPath: '/app/.next/'
            #  SourceVolume: 'next'
            #- ContainerPath: '/home/nextjs/'
            #  SourceVolume: 'next'
            - ContainerPath: '/tmp/'
              SourceVolume: 'tmp'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              HostPort: '0'
              Protocol: 'tcp'
          Environment:
            - Name: 'ENVIRONMENT'
              Value: !Sub 'ed-${EnvironmentName}'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub 'ed-${EnvironmentName}-${ServiceName}'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'
      Volumes:
        #- Name: 'next'
        #  DockerVolumeConfiguration:
        #    Scope: 'task'
        #    Driver: 'local'
        - Name: 'tmp'
          DockerVolumeConfiguration:
            Scope: 'task'
            Driver: 'local'
          

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ServiceDiscovery
      - TaskDefinition
      - TargetGroup
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Sub 'ed-${EnvironmentName}-cluster'
      LaunchType: 'EC2'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: '1'
      TaskDefinition: !Ref 'TaskDefinition'
      PropagateTags: TASK_DEFINITION
      LoadBalancers:
        - ContainerName: !Sub 'ed-${EnvironmentName}-${ServiceName}'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'
      ServiceRegistries:
        - RegistryArn: !GetAtt 'ServiceDiscovery.Arn'
          ContainerName: !Sub 'ed-${EnvironmentName}-${ServiceName}'
          ContainerPort: !Ref 'ContainerPort'
